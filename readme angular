npm install @angular/{common,compiler,compiler-cli,
core,
forms,http,platform-browser,platform-browser-dynamic,platform-server,
router,animations}@latest typescript@latest --save

Write components
mention in modules
Data binding to views through view to model of one and two wauy data binding
NGfor ul li 	component template html
Event handling
 NgModule.declarations?: (any[] | Type<any>)[] | undefined
The set of components, directives, and pipes (declarables) that belong to this module.

@usageNotes
The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.

Declarables must belong to exactly one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to declare a class that is imported from another module.

Example
The following example allows the CommonModule to use the NgFor directive.


*@NgModule*  
({
declarations: [NgFor]
})
class CommonModule {
}
Generate modules: Letâ€™s use the CLI to generate additional
modules:
ng generate module shared
ng generate module routing --routing
ng generate module sales
ng generate module supportng generate component sales
ng new directives-ex300

ng generate component support
ng generate component shared
Introducing Directives
Directives are markers on a DOM element (such as an attribute) that tell Angular to
attach a specified behavior to an existing element.
ngIf
ngFor
ngSwitch
ngClass
ngStyle
Decorator that marks a class as an Angular directive. You can define your own directives to attach custom behavior to elements in the DOM.

The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.

Directive classes, like component classes, can implement life-cycle hooks to influence their configuration and behavior.

@usageNotes
To define a directive, mark the class with the decorator and provide metadata.

import {Directive} from '@angular/core';  

*@Directive*  
({
selector: 'my-directive',
})
export class MyDirective {
...
}
Declaring directives
In order to make a directive available to other components in your application, you should do one of the following:

either mark the directive as standalone,
or declare it in an NgModule by adding it to the declarations and exports fields.
** Marking a directive as standalone **

You can add the standalone: true flag to the Directive decorator metadata to declare it as standalone:


*@Directive*  
({
standalone: true,
selector: 'my-directive',
})
class MyDirective {}
When marking a directive as standalone, please make sure that the directive is not already declared in an NgModule.

** Declaring a directive in an NgModule **

Another approach is to declare a directive in an NgModule:


*@Directive*  
({
selector: 'my-directive',
})
class MyDirective {}  

*@NgModule*  
({
declarations: [MyDirective, SomeComponent],
exports: [MyDirective], // making it available outside of this module
})
class SomeNgModule {}
When declaring a directive in an NgModule, please make sure that:

the directive is declared in exactly one NgModule.
the directive is not standalone.
you do not re-declare a directive imported from another module.
the directive is included into the exports field as well if you want this directive to be accessible for components outside of the NgModule.
@Annotation


